<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Event documentation
 *
 * @package    tool_monitor
 * @copyright  2014 onwards Ankit Agarwal <ankit.agrr@gmail.com>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace tool_monitor;

defined('MOODLE_INTERNAL') || die();

/**
 * Class for returning event information.
 *
 * @since      Moodle 2.8
 * @package    tool_monitor
 * @copyright  2014 onwards Ankit Agarwal <ankit.agrr@gmail.com>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class eventlist {

    /**
     * Get a list of events present in the system.
     *
     * @param bool $withoutcomponent Return an eventlist without associated components.
     *
     * @return array list of events present in the system.
     */
    public static function get_all_eventlist($withoutcomponent = false) {
        $classes = array_merge(\core_component::find_classes_in_subsystems('core', 'event', 'core\event\base', true),
            \core_component::find_classes_in_plugins('*', 'event', 'core\event\base', true));
        unset($classes['logstore_legacy']);
        $return = array();
        foreach ($classes as $component => $componentclasses) {
            foreach ($componentclasses as $fullpath => $classname) {
                if (!isset($return[$component]) && !$withoutcomponent) {
                    $return[$component] = array();
                }
                if ($classname === 'core\event\unknown_logged') {
                    // Remove exceptional events that will cause problems being displayed.
                    continue;
                }
                if ($withoutcomponent) {
                    $return[$classname] = $classname::get_name();
                } else {
                    $return[$component][$classname] = $classname::get_name();
                }
            }
        }
        return $return;
    }

    /**
     * Return list of plugins that have events.
     *
     * @param array $eventlist a list of events present in the system {@link eventlist::get_all_eventlist}.
     *
     * @return array list of plugins with human readable name.
     */
    public static function get_plugin_list($eventlist = array()) {
        if (empty($eventlist)) {
            $eventlist = self::get_all_eventlist();
        }
        $plugins = array_keys($eventlist);
        $return = array();
        foreach ($plugins as $plugin) {
            if ($plugin === 'core') {
                $return[$plugin] = get_string('core', 'tool_monitor');
            } else if (get_string_manager()->string_exists('pluginname', $plugin)) {
                $return[$plugin] = get_string('pluginname', $plugin);
            } else {
                $return[$plugin] = $plugin;
            }
        }

        return $return;
    }

    /**
     * validate if the given event belongs to the given plugin.
     *
     * @param string $plugin Frankenstyle name of the plugin.
     * @param string $eventname Full qualified event name.
     * @param array $eventlist List of events generated by {@link eventlist::get_all_eventlist}
     *
     * @return bool Returns true if the selected event belongs to the selected plugin, false otherwise.
     */
    public static function validate_event_plugin($plugin, $eventname, $eventlist = array()) {
        if (empty($eventlist)) {
            $eventlist = self::get_all_eventlist();
        }
        if (isset($eventlist[$plugin][$eventname])) {
            return true;
        }

        return false;
    }
}
